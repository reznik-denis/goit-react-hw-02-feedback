{"version":3,"sources":["Components/Statistics.jsx","Components/Section.jsx","Components/FeedbackOptions.jsx","Components/Notification.jsx","App.js","index.js"],"names":["Statistics","good","neutral","bad","total","positivePercentage","countTotal","countPositiveFeedback","Section","title","children","className","FeedbackOptions","options","onLeaveFeedback","map","option","type","onClick","Notification","message","App","state","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","increment","setState","prevState","Object","keys","this","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0RAwBeA,MArBf,YAAuE,IAAjDC,EAAgD,EAAhDA,KAAMC,EAA0C,EAA1CA,QAASC,EAAiC,EAAjCA,IAAKC,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,mBACnCC,EAAaF,IACbG,EAAwBF,IAC5B,OACE,+BACI,wCAAU,+BAAOJ,OACjB,2CAAa,+BAAOC,OACpB,uCAAS,+BAAOC,OAChB,yCAAW,+BAAOG,OAClB,qDAAwBC,EAAwB,+BAAOA,IAAgC,EAAvF,WCGDC,MAZf,YAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACtB,OAAO,oCACH,oBAAIC,UAAU,WAAd,SAA0BF,IACzBC,MCSME,MAZf,YAAuD,IAA5BC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,gBAChC,OAAO,qBAAKH,UAAU,gBAAf,SAAgCE,EAAQE,KAAI,SAACC,GAAD,OACnD,yBAAuBC,KAAK,SAASN,UAAU,SAASO,QAAS,kBAAMJ,EAAgBE,IAAvF,cAAmGA,EAAnG,MAAeA,SCMJG,MARf,YAAmC,IAAXC,EAAU,EAAVA,QACpB,OAAO,qBAAKT,UAAU,gBAAf,SAAgCS,KCwE5BC,E,4MAnEXC,MAAQ,CACJrB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EA2BToB,mBAAqB,WAEjB,OADmB,EAAKD,MAAMrB,KAAO,EAAKqB,MAAMpB,QAAU,EAAKoB,MAAMnB,K,EAIzEqB,gCAAkC,WAE9B,OAD8BC,KAAKC,MAAM,EAAKJ,MAAMrB,KAAO,EAAKsB,qBAAuB,M,EAG3FI,UAAY,SAACX,GACL,EAAKY,UAAS,SAAAC,GACV,OAAO,eACFb,EAASa,EAAUb,GAAU,O,uDAM5C,IAAMH,EAAUiB,OAAOC,KAAKC,KAAKV,OACnC,OACE,sBAAKX,UAAU,MAAf,UACE,cAAC,EAAD,CAASF,MAAO,wBAAhB,SACA,cAAC,EAAD,CAAiBI,QAASA,EAASC,gBAAiBkB,KAAKL,cAEzD,cAAC,EAAD,CAASlB,MAAO,aAAhB,SACSuB,KAAKT,qBAAuB,cAAC,EAAD,CACzBtB,KAAM+B,KAAKV,MAAMrB,KACjBC,QAAS8B,KAAKV,MAAMpB,QACpBC,IAAK6B,KAAKV,MAAMnB,IAChBC,MAAO4B,KAAKT,mBACZlB,mBAAoB2B,KAAKR,kCAAsC,cAAC,EAAD,CAAcJ,QAAQ,+B,GA7DvFa,aCHlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.a1e2e9c9.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction Statistics ({good, neutral, bad, total, positivePercentage}) {\r\n        const countTotal = total();\r\n        const countPositiveFeedback = positivePercentage();\r\n          return (\r\n            <ul>\r\n                <li>Good: <span>{good}</span></li>\r\n                <li>Neutral: <span>{neutral}</span></li>\r\n                <li>Bad: <span>{bad}</span></li>\r\n                <li>Total: <span>{countTotal}</span></li>\r\n                <li>Positive feedback: {countPositiveFeedback ? <span>{countPositiveFeedback}</span> : 0}%</li>\r\n            </ul>)\r\n};\r\n\r\nStatistics.propTypes = {\r\n    good: PropTypes.number.isRequired,\r\n    neutral: PropTypes.number.isRequired,\r\n    bad: PropTypes.number.isRequired,\r\n    total: PropTypes.func.isRequired,\r\n    positivePercentage: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default Statistics","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction Section({ title, children }) {\r\n    return <section>\r\n        <h2 className=\"feedback\">{title}</h2>\r\n        {children}\r\n        </section>\r\n};\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.node.isRequired,\r\n};\r\n\r\nexport default Section;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction FeedbackOptions ({options, onLeaveFeedback}) {\r\n    return <div className=\"centerButtons\">{options.map((option) => (\r\n    <button key = {option} type=\"button\" className=\"button\" onClick={() => onLeaveFeedback(option)}> { option } </button>\r\n    ))}</div>\r\n};\r\n\r\nFeedbackOptions.propTypes = {\r\n    options: PropTypes.arrayOf(PropTypes.string.isRequired),\r\n    onLeaveFeedback: PropTypes.func.isRequired,\r\n}\r\n\r\n\r\nexport default FeedbackOptions","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction Notification ({message}) {\r\n    return <div className=\"centerButtons\">{message}</div>\r\n};\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string,\r\n};\r\n\r\nexport default Notification;","import { Component } from 'react';\nimport './App.css';\n\nimport Statistics from './Components/Statistics';\nimport Section from './Components/Section';\nimport FeedbackOptions from './Components/FeedbackOptions';\nimport Notification from './Components/Notification';\n\nclass App extends Component {\n    state = {\n        good: 0,\n        neutral: 0,\n        bad: 0,\n    }\n  \n//   incrementGood = () => {\n//         this.setState(prevState => {\n//             return {\n//                 good: prevState.good + 1,\n//             }\n//         })\n//     }\n\n//     incrementNeutral = () => {\n//         this.setState(prevState => {\n//             return {\n//                 neutral: prevState.neutral + 1,\n//             }\n//         })\n//     }\n\n//     incrementBad = () => {\n//         this.setState(prevState => {\n//             return {\n//                 bad: prevState.bad + 1,\n//             }\n//         })\n//     }\n\n    countTotalFeedback = () => {\n        const countTotal = this.state.good + this.state.neutral + this.state.bad;\n        return countTotal;\n    }\n\n    countPositiveFeedbackPercentage = () => {\n        const countPositiveFeedback = Math.round(this.state.good / this.countTotalFeedback() * 100);\n        return countPositiveFeedback;\n    }\n    increment = (option) => {\n            this.setState(prevState => {\n                return {\n                    [option]: prevState[option] + 1,\n                }\n            })\n        }\n  \n  render() {\n      const options = Object.keys(this.state);\n    return (\n      <div className=\"App\">\n        <Section title={\"Please leave feedback\"}>\n        <FeedbackOptions options={options} onLeaveFeedback={this.increment}/>\n        </Section>\n        <Section title={\"Statistick\"}>\n                {this.countTotalFeedback() ? <Statistics\n                    good={this.state.good}\n                    neutral={this.state.neutral}\n                    bad={this.state.bad}\n                    total={this.countTotalFeedback}\n                    positivePercentage={this.countPositiveFeedbackPercentage} /> : <Notification message=\"No feedback given\" />}\n        </Section>\n      </div>\n    );\n}\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}